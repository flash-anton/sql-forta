
Первичный ключ (Primary Key, PK) - столбец или несколько, уникально идентифицирующий строку таблицы.
Внешний ключ (Foreign Key, FK)   - столбец или несколько, уникально идентифицирующий строку другой таблицы.

Комменты:
-- коммент
# коммент
/* многострочный
   коммент       */

--
Инструкции:
SELECT ...
FROM ...
WHERE ...
OFFSET 0
LIMIT 1
GROUP BY ... - группировка по столбцу.
HAVING ...   - фильтрация применяемая к группам. аналогична WHERE.
ORDER BY ...

SELECT column                             - один столбец.
SELECT column, ...                        - несколько столбцов.
SELECT *                                  - все столбцы.
SELECT DISTINCT ...                       - без дубликатов.
SELECT columnOrExpression ... AS alias    - назначение псевдонима длинному имени столбца или результату выражения.
SELECT 'xx' || column ...                 - ОПЕРАТОР конкатенации полей.
SELECT column +, -, *, / number           - ОПЕРАТОР +, -, *, /.

WHERE column IS NULL
WHERE column BETWEEN xx AND yy                          - в диапазоне включительно.
WHERE column =, !=, <, <=, >, >= xx                     - ОПЕРАТОР =, !=, <, <=, >, >=.
WHERE (column = xx OR column = yy) AND (column2 = zz)   - ОПЕРАТОРЫ OR и AND.
WHERE column IN (xx, yy)                                - ОПЕРАТОР IN - аналог OR.
WHERE NOT column = xx                                   - ОПЕРАТОР NOT - инверсия условия.
WHERE column LIKE 'xx'                                  - ОПЕРАТОР LIKE для фильтрации по МЕТАСИМВОЛАМ.
WHERE column LIKE 'xx%yy%'                              - МЕТАСИМВОЛ %   - любое кол-во любых символов.
WHERE column LIKE 'xx_yy_'                              - МЕТАСИМВОЛ _   - один любой символ.
WHERE column LIKE '[xy]%'                               - МЕТАСИМВОЛ []  - один из указанных символов.
WHERE column LIKE '[^xy]%'                              - МЕТАСИМВОЛ [^] - один из НЕ указанных символов.

ORDER BY column                                     - по одному столбцу.
ORDER BY column, ...                                - по первому, потом по второму и т.д.
ORDER BY column DESC, column2, column3 DESC, ...    - по первому в порядке убывания, потом по второму, потом по третьему в порядке убывания и т.д.

--
Функции для строк:
 TRIM()
RTRIM()
LTRIM()
 LEFT()
RIGHT()
SUBSTR()        - извлечение части строки.
UPPER()
LOWER()
LENGTH()

Функции для дат:
CURRENT_DATE                  - текущая дата.
DATE_PART( 'year', column )   - год.
EXTRACT( year FROM column )   - год.

Функции для чисел:
ABS()
COS()
SIN()
TAN()
EXP()
SQRT()
PI()

Функции прочие:
CAST()          - преобразование типов.

Итоговые функции:
COUNT()    - число строк в столбце (NULL строки игнорируются), либо в таблице (NULL не игнорируются).
AVG()      - среднее значение по числовому столбцу, NULL игнорируется.
MAX()
MIN()
SUM()


--
СОЕДИНЕНИЯ

Таблицы A и B для примеров соединений:
    A.key A.a  B.key B.b
    1     a1   1     b1
    2     a2   1     b2
    3     a2   3     b3
               4     b4

Внутреннее соединение - строки таблиц, которые удовлетворяют условиям.

    A.key A.a  B.key B.b     - По равенству - одинаковые столбцы разных таблиц дублируются с указанием имени таблиц.
    1     a1   1     b1        SELECT * FROM A, B     <=>     SELECT * FROM A
    1     a1   1     b2        WHERE A.key = B.key;   <=>     INNER JOIN B ON A.key = B.key;
    3     a2   3     b3

    A.key A.a  B.b           - Естественное соединение - одинаковые столбцы разных таблиц не дублируются.
    1     a1   b1              SELECT A.*, B.b FROM A, B
    1     a1   b2              WHERE A.key = B.key;
    3     a2   b3

    B.key B.b  B.key B.b     - Самосоединение
    1     b1   1     b2        SELECT * FROM B b1, B b2
    1     b2   1     b2        WHERE b1.key = b2.key AND b2.b = 'b2';

Внешнее соединение - строки таблиц, которые удовлетворяют условиям,
плюс остальные строки левой/правой/каждой таблицы, соединенные с пустыми строками.

    A.key A.a  B.key B.b     - SELECT ... LEFT OUTER JOIN ...
    1     a1   1     b1
    1     a1   1     b2
    2     a2   null  null
    3     a2   3     b3

    A.key A.a  B.key B.b     - SELECT ... RIGHT OUTER JOIN ...
    1     a1   1     b1
    1     a1   1     b2
    3     a2   3     b3
    null  null 4     b4

    A.key A.a  B.key B.b     - SELECT ... FULL OUTER JOIN ...
    1     a1   1     b1
    1     a1   1     b2
    2     a2   null  null
    3     a2   3     b3
    null  null 4     b4


--
Комбинирование инструкций SELECT происходит с помощью оператора UNION.
UNION     - удаляет дубликаты.
UNION ALL - оставляет дубликаты.
ORDER BY допускается один, в конце.

SELECT a AS c FROM A WHERE aa ='1'
UNION
SELECT b AS c FROM B WHERE bb ='2'


--
INSERT INTO A(a,b,c) VALUES('a',1,null);  - вставка всей строки.
INSERT INTO A(a,b) VALUES('a',1);         - вставка части строки.
INSERT INTO A(a,b) SELECT e,d FROM B;     - вставка строк из другой таблицы.

UPDATE A SET a = 'a' WHERE d = 'd';       - обновление строк.

DELETE FROM A WHERE a = 'a';              - удаление строк.
TRUNCATE TABLE A;                         - удаление всех строк, быстрее, чем DELETE.

CREATE TABLE E AS SELECT * FROM A;        - создание копии таблицы.


--
Советы, комменты:
- Разделять всю инфу на мелкие части по столбцам для удобства поиска и сортировки.
- Всегда определять первичный ключ.
- Считать собранные данные неотсортированными.
- Первая извлекаемая строка имеет индекс 0.
- Инструкции SQL состоят из предложений. Предложения состоят из ключевого слова и аргументов.
- Не извлекать все столбцы (*)    - СУБД быстрее обработает выборку и меньше передаст данных.
- Фильтровать на сервере (WHERE)  - СУБД быстрее обработает выборку и меньше передаст данных.
- Преобразовывать на сервере      - СУБД быстрее обработает выборку и меньше передаст данных.
- Использовать фильтрацию по МЕТАСИМВОЛАМ в последнюю очередь - работает медленней других видов поиска.
- Использовать скобки в WHERE - повышает читабельность и снижает вероятность появления ошибок.
- Не забывать, что строковые значения дополняются пробелами до длины столбца.
- Не забывать, что некоторые столбцы могут содержать значение NULL.
- Для тестов можно использовать только SELECT, например, SELECT 3*2; или SELECT TRIM('  abc  ');.
- Соединение таблиц или вложенные запросы? По-разному. Зависит от многих факторов. Надо экспериментировать.
- Нельзя удалить строку с PK, на который ссылается строка другой таблицы через FK.
- Не выполнять DELETE и UPDATE без WHERE во избежание удаления или обновления ВСЕХ СТРОК.
- В DELETE и UPDATE WHERE следует указывать PK для удаления или обновления одной строки.
